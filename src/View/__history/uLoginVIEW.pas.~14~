unit uLoginVIEW;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Datasnap.Provider,
  Data.DB, Datasnap.DBClient, uUsuarioControl;

type
  TfrmLogin = class(TForm)
    Label1: TLabel;
    EDT_Usuario: TEdit;
    Label2: TLabel;
    EDT_Senha: TEdit;
    Btn_OK: TButton;
    BTN_Cancelar: TButton;
    TB_Usuario: TClientDataSet;
    TB_UsuarioID: TIntegerField;
    TB_UsuarioNOME_USUARIO: TStringField;
    TB_UsuarioSENHA: TStringField;
    TB_UsuarioACESSO_LER: TStringField;
    TB_UsuarioACESSO_GRAVAR: TStringField;
    TB_UsuarioACESSO_DELETAR: TStringField;
    ds_Usuario: TDataSource;
    DataSetProvider: TDataSetProvider;
    procedure Btn_OKClick(Sender: TObject);
    procedure BTN_CancelarClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    { Private declarations }
    FUsuario: TUsuarioControl;
  public
    { Public declarations }
  end;

var
  frmLogin: TfrmLogin;

implementation

{$R *.dfm}

uses uPrincipalVIEW;

procedure TfrmLogin.BTN_CancelarClick(Sender: TObject);
begin
  application.Terminate;
end;

procedure TfrmLogin.Btn_OKClick(Sender: TObject);
var
  SenhaOk: Boolean;
begin
  if Trim(EDT_Usuario.Text) = '' then
    begin
      Showmessage('Usuário não pode ser vazio');
      EDT_Usuario.SetFocus;
      Abort;
    end;

  if Trim(EDT_Senha.Text) = '' then
    begin
      Showmessage('Senha não pode ser vazia');
      EDT_Usuario.SetFocus;
      Abort;
    end;

  try
    FUsuario:= TUsuarioControl.Create;
    SenhaOk := FUsuario.RetornaSenhaOk(Trim(EDT_Usuario.Text), frmPrincipal.CRIPTO_SENHA(Trim(EDT_Senha.Text)));
    if SenhaOk then
      close
    else
    begin
      Showmessage('Nome de Usuário ou Senha Inválida');
      EDT_Usuario.SetFocus;
      Abort;
    end;
  finally

  end;

end;

procedure TfrmLogin.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action :=cafree;
end;

end.
